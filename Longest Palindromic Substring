/* Author @Sagar Oza 
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:
Input: "cbbd"
Output: "bb"
*/
class Solution {
    public String longestPalindrome(String s) {
        
        boolean[][] dp = new boolean[s.length()][s.length()];
        String longest = "";
        
        for(int i=0;i<s.length();i++){
            dp[i][i] = true;
            longest = calLongest(longest,s.substring(i,i+1));
        }
        
        for(int i=2;i<=s.length();i++){
            for(int j=0;j<s.length()-i+1;j++){
                int start = j;
                int end = j+i-1;
                
                if(i>2 && s.charAt(start) == s.charAt(end)){
                    if(dp[start+1][end-1] == true){
                        dp[start][end] = true;
                        longest = calLongest(longest, s.substring(start,end+1));   
                    }
                }
                else if(i == 2 && s.charAt(start) == s.charAt(end)){
                        dp[start][end] = true;
                        longest = calLongest(longest, s.substring(start,end+1));
                }
            }
        }
        return longest;
    }
    
    private String calLongest(String longest, String str){
        if(longest.length() >= str.length())
            return longest;
        else
            return str;
    }
}
