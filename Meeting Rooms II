/* Author @Sagar Oza Source @LeetCode

253. Meeting Rooms II

Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

Example 1:

Input: [[0, 30],[5, 10],[15, 20]]
Output: 2
Example 2:

Input: [[7,10],[2,4]]
Output: 1

*/

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        //Base Case
        if(intervals.length == 0)
            return 0;
        // Sort intervals array in ascending order
        Arrays.sort(intervals, 
            new Comparator<Interval>(){
                public int compare(Interval start1, Interval start2){
                return start1.start - start2.start;
                }
            }
        );
        //Min heap
        PriorityQueue<Integer> minEndTime = new PriorityQueue<Integer>( 
                intervals.length,
                new Comparator<Integer>(){
                    public int compare(Integer end1, Integer end2){
                        return end1 - end2;
                    }
                }
        );
        //Iterate through meeting start time to find if new conference room is needed
        for(Interval meetTime : intervals){
            if(minEndTime.size()>0){
                if(meetTime.start >= minEndTime.peek())
                    minEndTime.poll();
            }
            minEndTime.offer(meetTime.end);     
        }
        
        return minEndTime.size();
    }
}
